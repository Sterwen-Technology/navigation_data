# -------------------------------------------------------------------------------
# Name:        pgn_python_gen
# Purpose:     Python code generator for pgn supporting classes
#
# Author:      Laurent Carré
#
# Created:     23/11/2023
# Copyright:   (c) Laurent Carré Sterwen Technology 2021-2023
# Licence:     Eclipse Public License 2.0
# -------------------------------------------------------------------------------


import logging
import datetime

from nmea2000.nmea2k_pgn_definition import PGNDef
from nmea2000.nmea2k_fielddefs import FIXED_LENGTH_BYTES, FIXED_LENGTH_NUMBER, VARIABLE_LENGTH_BYTES


_logger = logging.getLogger("ShipDataServer." + __name__)



class PythonPGNGenerator:

    level_indent = ['', '    ', '        ', '            ', '                ']
    base_class = 'NMEA2000OptimObject'

    def __init__(self, output_file):

        try:
            self._of = open(output_file, 'w')
        except IOError as err:
            _logger.error("Python code generator - error opening output file %s:%s" % (output_file, err))
            raise

        self._of.write('#   Python code generated by NMEA message router application (c) Sterwen Technology 2023\n')
        self._of.write('#   generated on %s\n' % datetime.datetime.now().strftime("%Y-%M-%d:%H:%M"))
        self._of.write('#   do not modify code\n\n\n')

    def gen_class(self, pgn_def: PGNDef):
        self._of.write('\n\n')
        class_name = "Pgn%dClass" % pgn_def.id
        self._of.write("class %s(%s):\n\n" % (class_name, self.base_class))
        level = 1
        attributes = []
        decode_str = "<"
        for field in pgn_def.field_iter():
            if field.decode_method == FIXED_LENGTH_NUMBER:
                decode_str += field.decode_string
            else:
                raise NotImplementedError
            if field.keyword is not None:
                # need to generate a local variable
                attributes.append()



