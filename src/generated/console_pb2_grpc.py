# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import generated.console_pb2 as console__pb2


class NavigationConsoleStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetInstruments = channel.unary_stream(
                '/NavigationConsole/GetInstruments',
                request_serializer=console__pb2.Request.SerializeToString,
                response_deserializer=console__pb2.InstrumentMsg.FromString,
                )
        self.GetInstrument = channel.unary_unary(
                '/NavigationConsole/GetInstrument',
                request_serializer=console__pb2.Request.SerializeToString,
                response_deserializer=console__pb2.InstrumentMsg.FromString,
                )
        self.InstrumentCmd = channel.unary_unary(
                '/NavigationConsole/InstrumentCmd',
                request_serializer=console__pb2.Request.SerializeToString,
                response_deserializer=console__pb2.Response.FromString,
                )
        self.ServerStatus = channel.unary_unary(
                '/NavigationConsole/ServerStatus',
                request_serializer=console__pb2.Request.SerializeToString,
                response_deserializer=console__pb2.ServerMsg.FromString,
                )
        self.ServerCmd = channel.unary_unary(
                '/NavigationConsole/ServerCmd',
                request_serializer=console__pb2.Request.SerializeToString,
                response_deserializer=console__pb2.Response.FromString,
                )


class NavigationConsoleServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetInstruments(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetInstrument(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InstrumentCmd(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ServerStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ServerCmd(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NavigationConsoleServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetInstruments': grpc.unary_stream_rpc_method_handler(
                    servicer.GetInstruments,
                    request_deserializer=console__pb2.Request.FromString,
                    response_serializer=console__pb2.InstrumentMsg.SerializeToString,
            ),
            'GetInstrument': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInstrument,
                    request_deserializer=console__pb2.Request.FromString,
                    response_serializer=console__pb2.InstrumentMsg.SerializeToString,
            ),
            'InstrumentCmd': grpc.unary_unary_rpc_method_handler(
                    servicer.InstrumentCmd,
                    request_deserializer=console__pb2.Request.FromString,
                    response_serializer=console__pb2.Response.SerializeToString,
            ),
            'ServerStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.ServerStatus,
                    request_deserializer=console__pb2.Request.FromString,
                    response_serializer=console__pb2.ServerMsg.SerializeToString,
            ),
            'ServerCmd': grpc.unary_unary_rpc_method_handler(
                    servicer.ServerCmd,
                    request_deserializer=console__pb2.Request.FromString,
                    response_serializer=console__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'NavigationConsole', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class NavigationConsole(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetInstruments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/NavigationConsole/GetInstruments',
            console__pb2.Request.SerializeToString,
            console__pb2.InstrumentMsg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetInstrument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NavigationConsole/GetInstrument',
            console__pb2.Request.SerializeToString,
            console__pb2.InstrumentMsg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InstrumentCmd(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NavigationConsole/InstrumentCmd',
            console__pb2.Request.SerializeToString,
            console__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ServerStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NavigationConsole/ServerStatus',
            console__pb2.Request.SerializeToString,
            console__pb2.ServerMsg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ServerCmd(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NavigationConsole/ServerCmd',
            console__pb2.Request.SerializeToString,
            console__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
